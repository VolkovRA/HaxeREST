package rest.cache;

import haxe.Constraints.Function;
import js.lib.Error;
import js.node.events.EventEmitter.Event;

/**
 * Событие файлового кеша.
 */
@:enum abstract CacheEvent<T:Function>(Event<T>) to Event<T>
{
    /**
     * В кеш добавлен новый файл.
     * 
     * Диспетчерезируется после загрузки файла из
     * файловой системы. Данные файла в кеше уже
     * доступны, но ещё не сжаты.
     * 
     * Событие содержит ссылку на добавленный файл.
     */
    var FILE_ADD:CacheEvent<CacheFile->Void> = "cacheFileAdd";

    /**
     * Из кеша удалён файл.
     * 
     * Диспетчерезируется после удаления файла из
     * кеша. Это происходит при удалении файла из
     * файловой системы. (Кеш отслеживает изменения
     * файловой системы)
     * 
     * Событие содержит ссылку на удалённый файл.
     */
    var FILE_REMOVE:CacheEvent<CacheFile->Void> = "cacheFileRemove";

    /**
     * Файл в кеше обновлён.
     * 
     * Диспетчерезируется при загрузке новой версии
     * файла. Это происходит при изменении файла в
     * файловой системе. (Кеш отслеживает изменения
     * файловой системы) Новая версия файла сперва
     * будет не сжатой.
     * 
     * Событие содержит ссылку на обновлённый файл.
     */
    var FILE_UPDATE:CacheEvent<CacheFile->Void> = "cacheFileUpdate";

    /**
     * Файл в кеше сжат.
     * 
     * Диспетчерезируется после завершения сжатия
     * загруженных данных файла в кеше. Теперь
     * данные файла находятся в сжатом виде.
     * 
     * Событие содержит ссылку на сжатый файл.
     */
    var FILE_COMPRESS:CacheEvent<CacheFile->Void> = "cacheFileCompress";

    /**
     * Запущен цикл обновления файлов в кеше.
     * 
     * Любое изменение в отслеживаемой папке или её
     * файлов приводит к запуску цикла обновления кеша.
     */
    var UPDATE_START:CacheEvent<Void->Void> = "cacheUpdateStart";

    /**
     * Цикл обновления кеша завершён.
     */
    var UPDATE_END:CacheEvent<Void->Void> = "cacheUpdateEnd";

    /**
     * Ошибка кеша.
     * 
     * Событие диспетчерезируется при возникновении
     * каких либо проблем в работе кеша.
     * 
     * Событие содержит ошибку. Приложение не падает.
     */
    var ERROR:CacheEvent<Error->Void> = "cacheError";
}